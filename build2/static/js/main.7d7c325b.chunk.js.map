{"version":3,"sources":["components/WebContext.js","constants/Colors.js","components/MainLayout.js","ajax.js","components/SourceButton.js","screens/SelectSourceScreen.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","headerBackground","headerTitle","videoControlIcons","ICON_SIZE","MainLayout","props","context","useContext","WebContext","styles","screen","height","header","backgroundColor","Colors","justifyContent","paddingHorizontal","alignItems","flexDirection","display","title","color","fontSize","supHeader","videoControl","addRequest","style","width","currentScreen","onClick","setCurrentScreen","leftIcon","controlVideoHandler","action","videoEl","videoRef","current","playAsync","pauseAsync","replayAsync","presentFullscreenPlayer","console","log","currentRequest","type","children","serverURL","sendRequest","request","a","async","URL","fetch","method","body","JSON","stringify","headers","response","resp","ok","json","getContent","SourceButton","borderRadius","marginTop","padding","minHeight","vh","text","textColor","fontWeight","SelectSourceScreen","sourceClickHandler","source","setSource","sourceElements","sources","map","s","bind","key","reducerReqs","reqs","newReq","filter","req","id","reqId","serverRequest","newRequest","server_request_id","status","serverResponse","newRequest2","links","Error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","useReducer","allRequests","dispatchAllRequests","useState","nextReqId","setNextReqId","setCurrentRequest","useRef","SCREENS","SelectSource","userId","useEffect","reqsOk","promises","ajax","Promise","all","res","forEach","sendRequestsServer","item","getContentRequests","MainContent","Provider","value","document","getElementById","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d7c325b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default React.createContext({});","export default {\r\n    headerBackground: \"#0C1B33\",\r\n    headerTitle: \"#F4E87C\",\r\n    videoControlIcons: \"#46d6e3\",\r\n}","import React, { useContext } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport WebContext from \"./WebContext\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\r\nimport Home from \"@material-ui/icons/Home\";\r\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\r\nimport Pause from \"@material-ui/icons/Pause\";\r\nimport Replay from \"@material-ui/icons/Replay\";\r\nimport Fullscreen from \"@material-ui/icons/Fullscreen\";\r\n\r\nconst ICON_SIZE = 25;\r\n\r\nexport default function MainLayout(props) {\r\n  const context = useContext(WebContext);\r\n\r\n  const styles = {\r\n    screen: {\r\n      height: \"100%\"\r\n    },\r\n  \r\n    header: {\r\n      height: 60,\r\n      backgroundColor: Colors.headerBackground,\r\n      justifyContent: \"space-between\",\r\n      paddingHorizontal: \"8%\",\r\n      alignItems: \"center\",\r\n      flexDirection: \"row\",\r\n      display: \"flex\",\r\n    },\r\n  \r\n    title: {\r\n      color: Colors.headerTitle,\r\n      fontSize: 20,\r\n    }, \r\n  \r\n    supHeader: {\r\n      backgroundColor: \"pink\",\r\n      height: \"5%\",\r\n    },\r\n\r\n    videoControl: {\r\n      flexDirection: \"row\"\r\n    }\r\n  };\r\n\r\n  // Add + at RHS if currentScreen==RequestsList\r\n  let addRequest = <div style={{width: ICON_SIZE}}></div>;\r\n  if (context.currentScreen === \"RequestsList\") addRequest = (\r\n    <div onClick={() => context.setCurrentScreen(\"AddRequest\")}>\r\n      <Add fontSize={ICON_SIZE} color={Colors.headerTitle} />\r\n    </div>\r\n  );\r\n\r\n  // Add Left Button\r\n  let leftIcon = <div style={{width: ICON_SIZE}}></div>;\r\n  if (context.currentScreen === \"RequestContent\") leftIcon = (\r\n    <div onClick={() => context.setCurrentScreen(\"RequestsList\")} >\r\n      <ArrowBack fontSize={ICON_SIZE} color={Colors.headerTitle} />\r\n    </div>\r\n  );\r\n  else if (context.currentScreen !== \"SelectSource\") leftIcon = (\r\n    <div onClick={() => context.setCurrentScreen(\"SelectSource\")} >\r\n      <Home fontSize={ICON_SIZE} color={Colors.headerTitle} />\r\n    </div>\r\n  )\r\n\r\n\r\n\r\n  // // Add something for header on android\r\n  // let supHeader = null;\r\n  // if (Platform.OS === \"android\") supHeader = <div style={styles.supHeader}></div>;\r\n\r\n  // *** Icons for RequestContent Video ***\r\n  // Deprecated !!!\r\n  function controlVideoHandler(action) {\r\n    const videoEl = context.videoRef.current;\r\n    if (videoEl) {\r\n      if (action === \"play\") videoEl.playAsync();\r\n      else if (action === \"pause\") videoEl.pauseAsync();\r\n      else if (action === \"replay\") videoEl.replayAsync();\r\n      else if (action === \"fullscreen\") videoEl.presentFullscreenPlayer();\r\n    }\r\n  }\r\n\r\n\r\n  let videoControl = null;\r\n  // const videoElement = context.videoRef.current;\r\n  console.log(\"videoRef\", context.videoRef);\r\n  if (\r\n    context.currentScreen===\"RequestContent\" && \r\n    context.currentRequest.type === \"Youtube\"\r\n    ) {\r\n    videoControl = (\r\n      <div style = {styles.videoControl}>\r\n        <div onClick={() => controlVideoHandler(\"play\")}>\r\n          <PlayArrow fontSize={ICON_SIZE} color={Colors.videoControlIcons} />\r\n        </div>\r\n\r\n        <div onClick={() => controlVideoHandler(\"pause\")}>\r\n          <Pause fontSize={ICON_SIZE} color={Colors.videoControlIcons} />\r\n        </div>\r\n\r\n        <div onClick={() => controlVideoHandler(\"replay\")}>\r\n          <Replay fontSize={ICON_SIZE} color={Colors.videoControlIcons} />\r\n        </div>\r\n\r\n        <div onClick={() => controlVideoHandler(\"fullscreen\")}>\r\n          <Fullscreen fontSize={ICON_SIZE} color={Colors.videoControlIcons} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={styles.screen}>\r\n      {/* {supHeader} */}\r\n      <div style={styles.header}>\r\n        {leftIcon}\r\n        <div style={styles.title}>{props.title}</div>\r\n        {addRequest}\r\n        {videoControl}\r\n      </div>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\n","export const serverURL = \"http://192.168.43.73:5000/\";\r\n\r\n// Function to add request to the server\r\nexport async function sendRequest(request) {\r\n  const URL = serverURL + \"add_request\"\r\n  console.log(\"Sending request\", request);\r\n\r\n  const response = await fetch(URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(request),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n  let resp = null;\r\n\r\n  if (response.ok) resp = await response.json();\r\n\r\n  return resp;\r\n}\r\n\r\n// Function to get content from server\r\nexport async function getContent(request) {\r\n  const URL = serverURL + \"send_results\";\r\n  console.log(\"Sending request to response\", request);\r\n\r\n  const response = await fetch(URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(request),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  });\r\n\r\n  let resp = await response.json();\r\n  return resp;\r\n}\r\n\r\n// Function to backup requests\r\nexport async function backupRequests(userId, requests) {\r\n  const URL = serverURL + `backup/${userId}`;\r\n  console.log(\"backup requests\");\r\n  \r\n  const response = await fetch(URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(requests),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  });\r\n\r\n  const res = await response.json();\r\n\r\n  return res;\r\n}\r\n\r\n// Function to get backup responses\r\nexport async function getBackupRequests(userId) {\r\n  console.log(\"getting backup requests\");\r\n  const URL = serverURL + `backup/${userId}`;\r\n\r\n  const response = await fetch(URL, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  });\r\n\r\n  const resp = await response.json();\r\n\r\n  return resp;\r\n}","import React, {useContext} from \"react\";\r\nimport WebContext from \"./WebContext\";\r\nimport Colors from \"../constants/Colors\";\r\n\r\nexport default function SourceButton(props) {\r\n  const context = useContext(WebContext);\r\n\r\n  // const radiusCircle = 35 + 4*context.vh;\r\n\r\n  const styles = {\r\n    screen: {\r\n       backgroundColor: Colors.headerTitle ,\r\n       borderRadius: 10,\r\n      // alignSelf: \"center\",\r\n      // justifyContent: \"center\",\r\n      // alignItems: \"center\",\r\n      marginTop: \"10px\",\r\n       padding: \"5px\",\r\n      //background: #eaeaea,\r\n      minHeight:100*context.vh,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100px\",\r\n    width: \"100vw\",\r\n    \r\n    /* Flex Fallback */\r\n    //marginLeft: \"5vw\",\r\n    //marginRight: \"5vw\",\r\n    //flex: 1 1 0.2*context.vw,\r\n    },\r\n  \r\n    text: {\r\n      fontSize: 30,\r\n      color: Colors.headerBackground || props.textColor || Colors.headerTitle,\r\n      fontWeight : \"bold\",\r\n    }\r\n  };\r\n  return (\r\n    <div onClick={props.onClick}>\r\n      <div style={styles.screen}>\r\n        <div style={styles.text}>{props.title}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, { useContext } from \"react\";\r\nimport SourceButton from \"../components/SourceButton\";\r\nimport WebContext from \"../components/WebContext\";\r\n\r\n\r\nexport default function SelectSourceScreen() {\r\n  const context = useContext(WebContext);\r\n\r\n  const styles = {\r\n    screen: {\r\n    }\r\n  };\r\n\r\n  function sourceClickHandler(source) {\r\n    context.setCurrentScreen(\"RequestsList\");\r\n    context.setSource(source);\r\n  }\r\n\r\n  const sourceElements = context.sources.map(s => (\r\n    <SourceButton\r\n      title={s}\r\n      onClick={sourceClickHandler.bind(this, s)}\r\n      key={s}\r\n    />\r\n  ));\r\n  return (\r\n    <div style={styles.screen}>\r\n      {sourceElements}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\n","import React, {useReducer, useState, useEffect, useRef} from \"react\";\r\nimport WebContext from \"./components/WebContext\";\r\nimport MainLayout from \"./components/MainLayout\";\r\nimport * as ajax from \"./ajax\";\r\nimport 'typeface-roboto';\r\n\r\n// Screens\r\nimport SelectSourceScreen from \"./screens/SelectSourceScreen\";\r\n// import RequestContentScreen from \"./screens/RequestContentScreen\";\r\n// import RequestsListScreen from \"./screens/RequestsListScreen\";\r\n// import AddRequestScreen from \"./screens/AddRequestScreen\";\r\n\r\nexport default function App() {\r\n\r\n  // Define values for context\r\n  const [allRequests, dispatchAllRequests] = useReducer(reducerReqs, []);\r\n  const [nextReqId, setNextReqId] = useState(1);\r\n  const [source, setSource] = useState(null);\r\n  const [currentScreen, setCurrentScreen] = useState(\"SelectSource\");\r\n  const [currentRequest, setCurrentRequest] = useState({});\r\n  const videoRef = useRef();\r\n\r\n  const SCREENS = {\r\n    SelectSource: { screen: SelectSourceScreen, title: \"WebBackPack\" },\r\n    // RequestsList: { screen: RequestsListScreen, title: source },\r\n    // RequestContent: { screen: RequestContentScreen, title: \"\" },\r\n    // AddRequest: { screen: AddRequestScreen, title: \"Add \" + source }\r\n  }\r\n\r\n  // Ask for information for saved requests whenever \r\n\r\n  const context = {\r\n    userId: \"Parvati\",\r\n    sources: [\"Youtube\", \"Wikitravel\"],\r\n    nextReqId,\r\n    setNextReqId,\r\n    allRequests,\r\n    dispatchAllRequests,\r\n    currentScreen,\r\n    setCurrentScreen,\r\n    source,\r\n    setSource,\r\n    setCurrentRequest,\r\n    currentRequest,\r\n    videoRef,\r\n  }\r\n\r\n  // Send saved requests to server\r\n  useEffect(() => {\r\n    async function sendRequestsServer() {\r\n      const reqsOk = context.allRequests.filter(\r\n        req => req.status === \"saved\"\r\n      );\r\n      const promises = reqsOk.map(req => ajax.sendRequest(req));\r\n      const results = await Promise.all(promises);\r\n\r\n      results\r\n        .filter(res => \"server_request_id\" in res)\r\n        .forEach(res => {\r\n          dispatchAllRequests({\r\n            type: \"updateReceivedServer\",\r\n            serverRequest: res\r\n          });\r\n\r\n        })\r\n\r\n    }\r\n    sendRequestsServer();\r\n  });\r\n\r\n  // Whenever app rerenders, send requests to server to get content\r\n  useEffect(() => {\r\n    async function getContentRequests() {\r\n      // Ask for content for each request with status receivedServer\r\n      const reqsOk = context.allRequests.filter(\r\n        req => req.status === \"receivedServer\"\r\n      );\r\n      const promises = reqsOk.map(req => ajax.getContent(req));\r\n      const results = await Promise.all(promises);\r\n\r\n      results\r\n        .filter(item => item.status === \"OK\")\r\n        .forEach(item => {\r\n          dispatchAllRequests({\r\n            type: \"updateDownloaded\",\r\n            serverResponse: item\r\n          })\r\n        })\r\n\r\n    }\r\n    getContentRequests();\r\n  });\r\n\r\n\r\n  // Main content definition\r\n  const MainContent = SCREENS[currentScreen].screen;\r\n\r\n  return (\r\n    <WebContext.Provider value={context}>\r\n      <MainLayout title={SCREENS[currentScreen].title}>\r\n        <MainContent />\r\n      </MainLayout>\r\n    </WebContext.Provider>\r\n  );\r\n}\r\n\r\n\r\nfunction reducerReqs(reqs, action) {\r\n  switch (action.type) {\r\n    case \"add\":\r\n      return [...reqs, action.newReq];\r\n    case \"remove\":\r\n      return reqs.filter(req => req.id !== action.reqId);\r\n    case \"updateReceivedServer\":\r\n      console.log(\"updating from serverRequest\", action.serverRequest);\r\n      const newRequest = { ...reqs.filter(req => req.id === action.serverRequest.id)[0] };\r\n      newRequest.server_request_id = action.serverRequest.server_request_id;\r\n      newRequest.status = \"receivedServer\";\r\n      return reqs.map(req => req.id === newRequest.id ? newRequest : req);\r\n    case \"updateDownloaded\":\r\n      console.log(\"Updating download\", action.serverResponse);\r\n      const newRequest2 = { ...reqs.filter(req => req.server_request_id === action.serverResponse.server_request_id)[0] };\r\n      newRequest2.status = \"downloadedServer\";\r\n      newRequest2.links = action.serverResponse.links;\r\n      // console.log(reqs.map(req => req.id === newRequest2.id ? newRequest2 : req));\r\n      console.log(action.serverResponse.server_request_id)\r\n      return reqs.map(req => (\r\n        req.server_request_id === action.serverResponse.server_request_id ?\r\n          newRequest2 :\r\n          req\r\n      ));\r\n    default:\r\n      throw Error(\"error in reducerReqs, App.js\");\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}